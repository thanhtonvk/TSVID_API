//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSVID_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TSVIDEntities : DbContext
    {
        public TSVIDEntities()
            : base("name=TSVIDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BangDiem> BangDiems { get; set; }
        public virtual DbSet<HocPhan> HocPhans { get; set; }
        public virtual DbSet<LichHoc> LichHocs { get; set; }
        public virtual DbSet<SinhVien> SinhViens { get; set; }
    
        public virtual ObjectResult<getBangDiem_Result> getBangDiem(Nullable<int> iDSV, Nullable<int> ky, string namHoc)
        {
            var iDSVParameter = iDSV.HasValue ?
                new ObjectParameter("IDSV", iDSV) :
                new ObjectParameter("IDSV", typeof(int));
    
            var kyParameter = ky.HasValue ?
                new ObjectParameter("Ky", ky) :
                new ObjectParameter("Ky", typeof(int));
    
            var namHocParameter = namHoc != null ?
                new ObjectParameter("NamHoc", namHoc) :
                new ObjectParameter("NamHoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getBangDiem_Result>("getBangDiem", iDSVParameter, kyParameter, namHocParameter);
        }
    
        public virtual ObjectResult<getBangDiemAll_Result> getBangDiemAll(Nullable<int> iDSV)
        {
            var iDSVParameter = iDSV.HasValue ?
                new ObjectParameter("IDSV", iDSV) :
                new ObjectParameter("IDSV", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getBangDiemAll_Result>("getBangDiemAll", iDSVParameter);
        }
    
        public virtual ObjectResult<getlichhoc_Result> getlichhoc(string tuan, Nullable<int> idsv, string nam)
        {
            var tuanParameter = tuan != null ?
                new ObjectParameter("tuan", tuan) :
                new ObjectParameter("tuan", typeof(string));
    
            var idsvParameter = idsv.HasValue ?
                new ObjectParameter("idsv", idsv) :
                new ObjectParameter("idsv", typeof(int));
    
            var namParameter = nam != null ?
                new ObjectParameter("nam", nam) :
                new ObjectParameter("nam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getlichhoc_Result>("getlichhoc", tuanParameter, idsvParameter, namParameter);
        }
    }
}
